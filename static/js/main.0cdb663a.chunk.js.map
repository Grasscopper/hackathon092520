{"version":3,"sources":["logo.svg","serviceWorker.js","AccountTile.js","Expenses.js","AppContainer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","AccountTile","props","account","title","Expenses","useState","accounts","setAccounts","setAccount","useEffect","storedAccounts","localStorage","getItem","JSON","parse","clearAccountForm","accountTiles","map","className","onSubmit","event","preventDefault","storage","accountsArray","push","accountsString","stringify","setItem","autoComplete","htmlFor","id","name","type","value","onChange","currentTarget","AppContainer","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,4KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCVSC,EANK,SAACC,GACnB,OACE,4BAAKA,EAAMC,QAAQC,QC8ERC,EA9EE,SAACH,GAAW,IAAD,EACII,mBAAS,IADb,mBACrBC,EADqB,KACXC,EADW,OAEEF,mBAAS,CACnCF,MAAO,KAHiB,mBAErBD,EAFqB,KAEZM,EAFY,KAM1BC,qBAAU,WACR,IACIC,EADUd,OAAOe,aACQC,QAAQ,YACf,MAAlBF,GACFH,EAAYM,KAAKC,MAAMJ,MAExB,IAEH,IA+BMK,EAAmB,WACvBP,EAAW,CACTL,MAAO,MAIPa,EAAeV,EAASW,KAAI,SAACf,GAC/B,OACE,kBAAC,EAAD,CAAaA,QAASA,OAI1B,OACE,yBAAKgB,UAAU,kBACb,+CACA,0BAAMC,SAtCU,SAACC,GACnBA,EAAMC,iBACN,IAAIC,EAAU1B,OAAOe,aACjBD,EAAiBY,EAAQV,QAAQ,YACrC,GAAsB,MAAlBF,EAAwB,CAC1B,IAAIa,EAAgBV,KAAKC,MAAMJ,GAC/Ba,EAAcC,KAAKtB,GACnB,IAAIuB,EAAiBZ,KAAKa,UAAUH,GACpCD,EAAQK,QAAQ,WAAYF,OAEzB,CACH,IAAIF,EAAgB,GACpBA,EAAcC,KAAKtB,GACnB,IAAIuB,EAAiBZ,KAAKa,UAAUH,GACpCD,EAAQK,QAAQ,WAAYF,GAE9BlB,EAAY,GAAD,mBACND,GADM,CAETJ,KAEFa,KAkB+Ba,aAAa,OACxC,2BAAOC,QAAQ,SAAf,SACA,2BACEC,GAAG,QACHC,KAAK,QACLC,KAAK,OACLC,MAAO/B,EAAQC,MACf+B,SArDO,SAACd,GACdA,EAAMC,iBACNb,EAAW,2BACNN,GADK,kBAEPkB,EAAMe,cAAcL,GAAKV,EAAMe,cAAcF,YAkD5C,4BAAQD,KAAK,UAAb,SAEF,wCACA,4BACChB,KC5DQoB,EAXM,SAACnC,GACpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,mBAAmBC,UAAWnC,OCFxDoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0cdb663a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nconst AccountTile = (props) => {\n  return (\n    <li>{props.account.title}</li>\n  )\n}\n\nexport default AccountTile\n","import React, { useState, useEffect } from 'react'\n\nimport AccountTile from './AccountTile'\n\nconst Expenses = (props) => {\n  let [accounts, setAccounts] = useState([])\n  let [account, setAccount] = useState({\n    title: \"\"\n  })\n\n  useEffect(() => {\n    let storage = window.localStorage\n    let storedAccounts = storage.getItem(\"accounts\") //JSON string\n    if (storedAccounts != null) {\n      setAccounts(JSON.parse(storedAccounts))\n    }\n  }, [])\n\n  const update = (event) => {\n    event.preventDefault()\n    setAccount({\n      ...account,\n      [event.currentTarget.id]: event.currentTarget.value\n    })\n  }\n\n  const postAccount = (event) => {\n    event.preventDefault()\n    let storage = window.localStorage\n    let storedAccounts = storage.getItem(\"accounts\") //JSON string\n    if (storedAccounts != null) {\n      let accountsArray = JSON.parse(storedAccounts) //JSON to array\n      accountsArray.push(account) //push new account on array\n      let accountsString = JSON.stringify(accountsArray) //Array to JSON\n      storage.setItem(\"accounts\", accountsString) //save new account\n    }\n    else {\n      let accountsArray = []\n      accountsArray.push(account)\n      let accountsString = JSON.stringify(accountsArray)\n      storage.setItem(\"accounts\", accountsString)\n    }\n    setAccounts([\n      ...accounts,\n      account\n    ])\n    clearAccountForm()\n  }\n\n  const clearAccountForm = () => {\n    setAccount({\n      title: \"\"\n    })\n  }\n\n  let accountTiles = accounts.map((account) => {\n    return (\n      <AccountTile account={account} />\n    )\n  })\n\n  return (\n    <div className=\"grid-container\">\n      <h1>Expense Tracker</h1>\n      <form onSubmit={postAccount} autoComplete=\"off\">\n        <label htmlFor=\"title\">Title</label>\n        <input\n          id=\"title\"\n          name=\"title\"\n          type=\"text\"\n          value={account.title}\n          onChange={update} />\n        <button type=\"submit\">Save</button>\n      </form>\n      <h3>Accounts</h3>\n      <ul>\n      {accountTiles}\n      </ul>\n    </div>\n  )\n}\n\nexport default Expenses\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport Expenses from './Expenses'\n\nconst AppContainer = (props) => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Expenses} />\n        <Route exact path=\"/hackathon092520\" component={Expenses} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default AppContainer\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport AppContainer from './AppContainer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}